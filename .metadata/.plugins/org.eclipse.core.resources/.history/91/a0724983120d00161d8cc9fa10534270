package com.buaa.hadoop1.weibo;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.util.LineReader;
/**
 * 自定义输入格式
 * @author 李鹏
 * @time 2016年4月28日下午2:46:10
 */
public class WeiboInputFormat extends FileInputFormat<Text, WeiboWritable> {

	/*
	 * 负责把数据切分成键值对，然后传递给Mapper
	 */
	@Override
	public RecordReader<Text, WeiboWritable> createRecordReader(InputSplit split, TaskAttemptContext context)
			throws IOException, InterruptedException {
		
		return new WeiboRecordReader();
	}

	/*
	 * 自定义RecordReader
	 */
	public static class WeiboRecordReader extends RecordReader<Text, WeiboWritable>{
		public LineReader in;//行读取器
		public Text lineKey;//自定义key类型
		public WeiboWritable lineValue;//自定义value类型
		public Text line;//每行数据类型

		/*
		 * 初始化
		 */
		@Override
		public void initialize(InputSplit split, TaskAttemptContext context) throws IOException, InterruptedException {
			Configuration job = context.getConfiguration();//得到任务
			
			//获取文件
			FileSplit fs = (FileSplit)split;
			Path file = fs.getPath();//得到文件
			
			//打开文件
			FileSystem fileSystem = file.getFileSystem(job);
			FSDataInputStream is = fileSystem.open(file);
			
			//读取文件，并传送下去
			//初始化参数
			in = new LineReader(is, job);
			line = new Text();
			lineKey = new Text();
			lineValue = new WeiboWritable();
		}

		@Override
		public boolean nextKeyValue() throws IOException, InterruptedException {
			
			return false;
		}

		@Override
		public Text getCurrentKey() throws IOException, InterruptedException {
			
			return lineKey;
		}

		@Override
		public WeiboWritable getCurrentValue() throws IOException, InterruptedException {
			
			return lineValue;
		}

		@Override
		public float getProgress() throws IOException, InterruptedException {
			
			return 0;
		}

		/*
		 * 关闭流
		 */
		@Override
		public void close() throws IOException {
			if(in != null){
				in.close();
			}
		}
		
	}

}
